{
  "name": "Multi-Chain 1Shot Gas Station",
  "nodes": [
    {
      "parameters": {
        "content": "## x402 Payment Endpoint \n\nThis workflow lets the operator monetize swaps from ERC-20 tokens to native gas tokens on up to 100 different EVM blockchains via the [Li.Fi](https://li.fi/) protocol. \n\nSee the example curl command below for the proper payload configuration. \n\nLearn more about the [x402 payment](https://www.x402.org/) protocol. \n\nWatch the [YouTube tutorial]() video.",
        "height": 300,
        "width": 360
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -992,
        672
      ],
      "id": "61942572-cf88-4d9a-bb8b-d9fdbe69f0e5",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "## Example Curl Command\n\nYou can test [1Shot Gas Station](https://github.com/uxlysoftware/1shot-gas-station?tab=readme-ov-file#1shot-api-gas-station) endpoint with a command like this (be sure to use a [properly formatted x-payment header](https://1shotapi.com/tools) payload: \n\n```sh\n# swap out the URL here for you webhook URL endpoint\ncurl -X POST \\\n  https://n8n.1shotapi.dev/webhook-test/gas-station \\\n  -H \"x-payment: YOUR-BASE64-ENCODED-PAYMENT-PAYLOAD\" \\\n  -H \"User-Agent: CustomUserAgent/1.0\" \\\n  -H \"Accept: application/json\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"fromChain\": \"43114\",\n    \"fromToken\": \"0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7\",\n    \"fromAmount\": \"1000000\",\n    \"fromAddress\": \"0x55680c6b69d598c0b42f93cd53dff3d20e069b5b\",\n    \"toChain\": \"43114\"\n  }'\n```",
        "height": 500,
        "width": 840
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1280,
        1280
      ],
      "id": "0ea9c803-e6bd-424d-8185-94f3f35047ee",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "={ \"transactionHash\": \"{{ $json.transactionHash }}\" }",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        1456,
        416
      ],
      "id": "a229f609-6a92-4423-bfb5-176b5635dbe0",
      "name": "Response: 200 - Payment Successful"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"x402Version\": \"1\",\n  \"error\": \"X-PAYMENT payment invalid\",\n  \"accepts\": [\n    {\n      \"scheme\": \"exact\",\n      \"network\": \"base\",\n      \"maxAmountRequired\": \"1000000\",\n      \"resource\": \"https://n8n.1shotapi.dev/webhook-test/gas-station\",\n      \"description\": \"Swap stablecoins for gas tokens\",\n      \"mimeType\": \"\",\n      \"payTo\": \"0xA1BfEd6c6F1C3A516590edDAc7A8e359C2189A61\",\n      \"maxTimeoutSeconds\": 150,\n      \"asset\": \"0x833589fcd6edb6e08f4c7c32d4f71b54bda02913\",\n      \"extra\": {\n        \"name\": \"USD Coin\",\n        \"version\": \"2\"\n      }\n    }\n  ]\n}",
        "options": {
          "responseCode": 402
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        1456,
        640
      ],
      "id": "2290b67c-ad8d-4021-919d-16ce4ff48623",
      "name": "Response: Payment Invalid"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ae6f06ed-217e-4820-9e0c-a9f4c4c7c5e2",
              "leftValue": "={{ $json.decodedXPayment.payload.signature }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "a8ac3461-1615-4de6-81ce-6ca3f92fca04",
              "leftValue": "={{ $json.decodedXPayment.payload.authorization.from }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "851fbfb8-4023-473b-af00-6f466cfd72fc",
              "leftValue": "={{ $json.decodedXPayment.payload.authorization.to }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "1fe53533-d162-46bc-8b9e-8170a2297263",
              "leftValue": "={{ $json.decodedXPayment.payload.authorization.value }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "f7621873-14cb-4d7d-9b9d-3c7818bed576",
              "leftValue": "={{ $json.decodedXPayment.payload.authorization.validAfter }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "b9c9c1fd-ddbc-48bb-b42a-d781743b755b",
              "leftValue": "={{ $json.decodedXPayment.payload.authorization.validBefore }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "c37c20db-22a3-4f45-90ed-0abae3dbf0ef",
              "leftValue": "={{ $json.decodedXPayment.payload.authorization.nonce }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "3fdd1014-3673-4a37-bd1b-7ca3ab817c8a",
              "leftValue": "={{ $json.decodedXPayment.payload.authorization.value }}",
              "rightValue": "={{ $('Webhook').item.json.body.fromAmount }}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            },
            {
              "id": "ce8b9784-3927-4329-be27-533a9bed4455",
              "leftValue": "={{ parseInt($json.decodedXPayment.payload.authorization.validBefore) - Math.floor(DateTime.now()/1000) }}",
              "rightValue": 120,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        560,
        640
      ],
      "id": "bd1b6655-770c-4c32-ad45-7704474b785d",
      "name": "Ensure Well Formatted Payment Payload"
    },
    {
      "parameters": {
        "contractMethodId": "={{ $('Lookup Payment Configs').item.json.paymentConfig.contractMethodId }}",
        "params": "={\n  \"tokenAddress\": \"{{ $('Webhook').item.json.body.fromToken }}\",\n  \"from\":  \"{{ $('Ensure Well Formatted Payment Payload').item.json.decodedXPayment.payload.authorization.from }}\",\n  \"value\": \"{{ $('Ensure Well Formatted Payment Payload').item.json.decodedXPayment.payload.authorization.value }}\",\n  \"validAfter\": \"{{ $('Ensure Well Formatted Payment Payload').item.json.decodedXPayment.payload.authorization.validAfter }}\",\n  \"validBefore\": \"{{ $('Ensure Well Formatted Payment Payload').item.json.decodedXPayment.payload.authorization.validBefore }}\",\n  \"nonce\": \"{{ $('Ensure Well Formatted Payment Payload').item.json.decodedXPayment.payload.authorization.nonce }}\",\n  \"signature\": \"{{ $('Ensure Well Formatted Payment Payload').item.json.decodedXPayment.payload.signature }}\",\n  \"diamondCalldata\": \"{{ $('Ensure Well Formatted Payment Payload').item.json.transactionRequest.data }}\"\n} ",
        "additionalFields": {
          "memo": "=Li.Fi swap - receiver:  {{ $('Ensure Well Formatted Payment Payload').item.json.decodedXPayment.payload.authorization.from }}, token: {{ $('Webhook').item.json.body.fromToken }},amount: {{ $('Ensure Well Formatted Payment Payload').item.json.decodedXPayment.payload.authorization.value }}, chain: {{ $('Webhook').item.json.body.fromChain }}",
          "gasLimit": "={{ (parseInt($json.transactionRequest.gasLimit, 16) + 100000).toString() }}"
        }
      },
      "type": "n8n-nodes-1shot.oneShotSynch",
      "typeVersion": 1,
      "position": [
        1232,
        464
      ],
      "id": "91525929-27ef-4000-8291-90e63e6bd88d",
      "name": "1Shot API Submit & Wait",
      "credentials": {
        "oneShotOAuth2Api": {
          "id": "nkfF9AitCKUCrErK",
          "name": "1Shot account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "81c67679-e256-4fd2-bed7-8f4272c2392b",
              "leftValue": "={{ $json.success.toString() }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1008,
        544
      ],
      "id": "b100e695-c36e-45cc-87d4-5a2c1641bfe2",
      "name": "On Successful Payment Simulation"
    },
    {
      "parameters": {
        "operation": "simulate",
        "contractMethodId": "={{ $('Lookup Payment Configs').item.json.paymentConfig.contractMethodId }}",
        "params": "={\n  \"tokenAddress\": \"{{ $('Webhook').item.json.body.fromToken }}\",\n  \"from\":  \"{{ $json.decodedXPayment.payload.authorization.from }}\",\n  \"value\": \"{{ $json.decodedXPayment.payload.authorization.value }}\",\n  \"validAfter\": \"{{ $json.decodedXPayment.payload.authorization.validAfter }}\",\n  \"validBefore\": \"{{ $json.decodedXPayment.payload.authorization.validBefore }}\",\n  \"nonce\": \"{{ $json.decodedXPayment.payload.authorization.nonce }}\",\n  \"signature\": \"{{ $json.decodedXPayment.payload.signature }}\",\n  \"diamondCalldata\": \"{{ $json.transactionRequest.data }}\"\n} ",
        "gasLimit": "={{ (parseInt($json.transactionRequest.gasLimit, 16) + 100000).toString() }}"
      },
      "type": "n8n-nodes-1shot.oneShot",
      "typeVersion": 1,
      "position": [
        784,
        544
      ],
      "id": "1c7c6614-8838-479d-8643-c4c23c28996d",
      "name": "Simulate Payment",
      "credentials": {
        "oneShotOAuth2Api": {
          "id": "nkfF9AitCKUCrErK",
          "name": "1Shot account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "try {\n    // Decode the x-payment header from base64\n    const xPaymentHeader = $('Webhook').first().json.headers['x-payment'];\n    const decodedXPayment = Buffer.from(xPaymentHeader, 'base64').toString('utf-8');\n\n    // Parse the decoded value into a JSON object\n    const decodedXPaymentJson = JSON.parse(decodedXPayment);\n\n    // Add the parsed JSON object to the input\n    $input.first().json.decodedXPayment = decodedXPaymentJson;\n\n    return $input.all();\n} catch (error) {\n    // Return an error object if the token format is invalid\n    return { error: \"invalid token format\" };\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        336,
        640
      ],
      "id": "111be73d-9efd-405c-8a40-37a658ffbd6d",
      "name": "Decode & Validate X-Payment"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "2ff83590-61f3-41d8-8500-a96103c3844c",
              "leftValue": "={{ $('Webhook').item.json.headers['x-payment'] }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        112,
        736
      ],
      "id": "65cfb1b1-3757-4d68-be84-87dc39d15663",
      "name": "Check for presence of X-HEADER"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "=gas-station",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -784,
        1024
      ],
      "id": "f39716c2-10c5-4db8-abd2-a3c1a4abef53",
      "name": "Webhook",
      "webhookId": "92c5ca23-99a7-437d-85da-84aef8bd2a25"
    },
    {
      "parameters": {
        "url": "https://li.quest/v1/quote",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "fromChain",
              "value": "={{ $('Webhook').item.json.body.fromChain }}"
            },
            {
              "name": "fromToken",
              "value": "={{ $('Webhook').item.json.body.fromToken }}"
            },
            {
              "name": "fromAddress",
              "value": "={{ $('Webhook').item.json.body.fromAddress }}"
            },
            {
              "name": "toChain",
              "value": "={{ $('Webhook').item.json.body.toChain }}"
            },
            {
              "name": "toToken",
              "value": "=0x0000000000000000000000000000000000000000"
            },
            {
              "name": "toAddress",
              "value": "={{ $('Webhook').item.json.body.fromAddress }}"
            },
            {
              "name": "slippage",
              "value": "0.05"
            },
            {
              "name": "integrator",
              "value": "oneshot-gas-station"
            },
            {
              "name": "=fromAmount",
              "value": "={{ $('Webhook').item.json.body.fromAmount }}"
            },
            {
              "name": "allowBridges",
              "value": "gasZipBridge"
            },
            {
              "name": "fee",
              "value": "0.005"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-lifi-api-key",
              "value": "6477de9d-675c-49e8-9d79-d89b849a5101.bd63c1c7-af76-4605-87c6-43344d951395"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -112,
        832
      ],
      "id": "efdbe5bb-7786-45da-95f7-f2f4771d94e9",
      "name": "Fetch Li.Fi Quote",
      "retryOnFail": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "de6db9c5-eadc-4ccb-a74c-f18e9bb1370c",
              "leftValue": "={{ $json.body.fromToken }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "db76fbee-12ef-4aa4-8e1b-f94ed21a5802",
              "leftValue": "={{ $json.body.toChain }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "9e65c67e-e175-4b40-bd7c-d998cc19d787",
              "leftValue": "={{ $json.body.fromToken }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "12e5e3d0-5490-4f45-b091-90ac248b95c7",
              "leftValue": "={{ $json.body.fromAmount }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "fa9e0727-5f48-42b8-ae5f-7b066a72f7bd",
              "leftValue": "={{ $json.body.fromAddress }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -560,
        1024
      ],
      "id": "3a877b1c-a8c3-4f6d-b4bf-4597d9f915ec",
      "name": "Ensure Request Body Parameters"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"x402Version\": \"1\",\n  \"error\": \"Missing request parameters: fromAddress, fromToken, fromChain, fromAmount, toChain\",\n  \"accepts\": []\n}",
        "options": {
          "responseCode": 402
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        -336,
        1120
      ],
      "id": "c9b84d33-94ec-4524-91a7-17e107fa9956",
      "name": "Response: Missing or Invalid Request Body Params"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"x402Version\": \"1\",\n  \"error\": \"Missing x-payment header\",\n  \"estimate\": {\n    \"toAmountMin\": {{ $json.estimate.toAmountMin }},\n    \"toAmountUSD\": {{ $json.estimate.toAmountUSD }},\n    \"executionDuration\": {{ $json.estimate.executionDuration }}\n  },\n  \"accepts\": [\n    {\n      \"scheme\": \"exact\",\n      \"network\": \"{{ $('Lookup Payment Configs').item.json.paymentConfig.network }}\",\n      \"maxAmountRequired\": \"{{ $('Webhook').item.json.body.fromAmount }}\",\n      \"resource\": \"https://n8n.1shotapi.dev/webhook/gas-station\",\n      \"description\": \"Swap stablecoins for gas tokens\",\n      \"mimeType\": \"\",\n      \"payTo\": \"0x4E43836F329B5f176A5d1a21519d0C61f819429C\",\n      \"maxTimeoutSeconds\": 150,\n      \"asset\": \"{{ $('Lookup Payment Configs').item.json.paymentConfig.tokenAddress }}\",\n      \"extra\": {\n        \"name\": \"{{ $('Lookup Payment Configs').item.json.paymentConfig.name }}\",\n        \"version\": \"{{ $('Lookup Payment Configs').item.json.paymentConfig.version }}\"\n      }\n    }\n  ]\n}",
        "options": {
          "responseCode": 402
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        336,
        832
      ],
      "id": "693717c9-e36c-4db3-99bf-54922afccd40",
      "name": "Response: No X-Payment Header"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"x402Version\": \"1\",\n  \"error\": \"Missing or invalid x-payment header\",\n  \"accepts\": [\n    {\n      \"scheme\": \"exact\",\n      \"network\": \"base\",\n      \"maxAmountRequired\": \"1000000\",\n      \"resource\": \"https://n8n.1shotapi.dev/webhook-test/gas-station\",\n      \"description\": \"Swap stablecoins for gas tokens\",\n      \"mimeType\": \"\",\n      \"payTo\": \"0x4E43836F329B5f176A5d1a21519d0C61f819429C\",\n      \"maxTimeoutSeconds\": 180,\n      \"asset\": \"{{ $('Lookup Payment Configs').item.json.paymentConfig.tokenAddress }}\",\n      \"extra\": {\n        \"name\": \"{{ $('Lookup Payment Configs').item.json.paymentConfig.name }}\",\n        \"version\": \"{{ $('Lookup Payment Configs').item.json.paymentConfig.version }}\"\n      }\n    }\n  ]\n}",
        "options": {
          "responseCode": 402
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        784,
        736
      ],
      "id": "4a92e220-7ca7-4857-bd93-1a6ac99b4fc5",
      "name": "Response: Missing or Invalid X-Payment Header"
    },
    {
      "parameters": {
        "jsCode": "const fromToken = $input.first().json.body.fromToken;\nconst fromChain = $input.first().json.body.fromChain;\n\nconst config = {\n  \"0x833589fcd6edb6e08f4c7c32d4f71b54bda02913\": {\n    tokenAddress: \"0x833589fcd6edb6e08f4c7c32d4f71b54bda02913\",\n    chain: \"8453\",\n    name: \"USD Coin\",\n    version: \"2\",\n    contractMethodId: \"c181f867-b03c-4a34-a8b1-de3cc05021c1\",\n    network: \"base\"\n  },\n  \"0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e\": {\n    tokenAddress: \"0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e\",\n    chain: \"43114\",\n    name: \"USD Coin\",\n    version: \"2\",\n    contractMethodId: \"d359bee6-83f5-4e0d-972c-5385c0f6ece2\",\n    network: \"avalanche\"\n  },\n  \"0xaf88d065e77c8cc2239327c5edb3a432268e5831\": {\n    tokenAddress: \"0xaf88d065e77c8cc2239327c5edb3a432268e5831\",\n    chain: \"42161\",\n    name: \"USD Coin\",\n    version: \"2\",\n    contractMethodId: \"507a44d3-42c9-45e8-9101-ab6cfa42be68\",\n    network: \"arbitrum\"\n  }\n};\n\n// Check if fromToken exists in config\nif (!config[fromToken.toLowerCase()]) {\n  throw new Error(`Token ${fromToken} not found in configuration`);\n}\n\n// Optionally you could also validate the chain if needed\nif (config[fromToken.toLowerCase()].chain !== fromChain) {\n  throw new Error(`Invalid chain for token ${fromToken}`);\n}\n\n// Add the parsed JSON object to the input\n$input.first().json.paymentConfig = config[fromToken.toLowerCase()];\n\nreturn $input.all();\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -336,
        928
      ],
      "id": "71a79e54-197c-472a-be5d-2b4d7386b661",
      "name": "Lookup Payment Configs",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"x402Version\": \"1\",\n  \"error\": \"Please provide a valid stablecoin to swap\",\n  \"accepts\": []\n}",
        "options": {
          "responseCode": 402
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        -112,
        1024
      ],
      "id": "52db2011-d0da-4234-9fd2-8c5edd6312c3",
      "name": "Response: Bad Token Address"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"x402Version\": \"1\",\n  \"error\": \"Bad quote input parameters, check out payload values.\",\n  \"accepts\": []\n}",
        "options": {
          "responseCode": 402
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.3,
      "position": [
        112,
        928
      ],
      "id": "fdd6c3b7-60b3-4966-83d5-d7d1aeb6ce13",
      "name": "Response: Failed to Get Quote"
    },
    {
      "parameters": {
        "content": "## Fetch Swap Route & Quote form Li.Fi\n\nUse the input parameters to find a route and quote to convert the user's tokens into native gas tokens.",
        "height": 144,
        "width": 336
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -304,
        656
      ],
      "id": "5bb57721-3431-49b5-a650-f39df5365cb9",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Use 1Shot API to Simulate and Submit the Swap \n\n[1Shot API](https://1shotapi.com) handles simulating the transaction and submitting it the the appropriate blockchain network. ",
        "width": 512
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        784,
        272
      ],
      "id": "7ac5e876-92f3-4666-b466-3eac67202b02",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Payment Configs\n\nYou must edit the \"Lookup Payment Configs\" node with the tokens you wish to support for swaps.\n\nYou need:\n\n1. The token address\n2. The EVM chain id\n3. The token `name`\n4. Token `version`\n5. Import the 1Shot Gas Station `callDiamondWithEIP3009SignatureToNative` method into your 1Shot API business account and input its `contractMethodId`.",
        "height": 352,
        "width": 592
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -80,
        1264
      ],
      "id": "e054c47e-26f4-4541-a9a5-214c09ff14f4",
      "name": "Sticky Note2"
    }
  ],
  "pinData": {},
  "connections": {
    "Ensure Well Formatted Payment Payload": {
      "main": [
        [
          {
            "node": "Simulate Payment",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response: Missing or Invalid X-Payment Header",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "1Shot API Submit & Wait": {
      "main": [
        [
          {
            "node": "Response: 200 - Payment Successful",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response: Payment Invalid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On Successful Payment Simulation": {
      "main": [
        [
          {
            "node": "1Shot API Submit & Wait",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response: Payment Invalid",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simulate Payment": {
      "main": [
        [
          {
            "node": "On Successful Payment Simulation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Decode & Validate X-Payment": {
      "main": [
        [
          {
            "node": "Ensure Well Formatted Payment Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check for presence of X-HEADER": {
      "main": [
        [
          {
            "node": "Decode & Validate X-Payment",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response: No X-Payment Header",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Ensure Request Body Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Li.Fi Quote": {
      "main": [
        [
          {
            "node": "Check for presence of X-HEADER",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response: Failed to Get Quote",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Ensure Request Body Parameters": {
      "main": [
        [
          {
            "node": "Lookup Payment Configs",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response: Missing or Invalid Request Body Params",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lookup Payment Configs": {
      "main": [
        [
          {
            "node": "Fetch Li.Fi Quote",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Response: Bad Token Address",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "6db54efc-c4e8-429a-8368-6876959d23dd",
  "meta": {
    "instanceId": "62f017ec8f130d172e2e5f39bbf09515036bfd403dfa60fe06f5ab14b78705d0"
  },
  "id": "hLSP3IRTzc3oceob",
  "tags": []
}